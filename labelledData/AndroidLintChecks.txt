DrawAllocation
--------------
Summary: Memory allocations within drawing code

Priority: 9 / 10
Severity: Warning
Category: Performance

You should avoid allocating objects during a drawing or layout operation.
These are called frequently, so a smooth UI can be interrupted by garbage
collection pauses caused by the object allocations.

The way this is generally handled is to allocate the needed objects up front
and to reuse them for each drawing operation.

Some methods allocate memory on your behalf (such as Bitmap.create), and these
should be handled in the same way.


Wakelock
--------
Summary: Incorrect WakeLock usage

Priority: 9 / 10
Severity: Warning
Category: Performance

Failing to release a wakelock properly can keep the Android device in a high
power mode, which reduces battery life. There are several causes of this, such
as releasing the wake lock in onDestroy() instead of in onPause(), failing to
call release() in all possible code paths after an acquire(), and so on.

NOTE: If you are using the lock just to keep the screen on, you should
strongly consider using FLAG_KEEP_SCREEN_ON instead. This window flag will be
correctly managed by the platform as the user moves between applications and
doesn't require a special permission. See
http://developer.android.com/reference/android/view/WindowManager.LayoutParams
.html#FLAG_KEEP_SCREEN_ON.


WakelockTimeout
---------------
Summary: Using wakeLock without timeout

Priority: 9 / 10
Severity: Warning
Category: Performance

Wakelocks have two acquire methods: one with a timeout, and one without. You
should generally always use the one with a timeout. A typical timeout is 10
minutes. If the task takes longer than it is critical that it happens (i.e.
can't use JobScheduler) then maybe they should consider a foreground service
instead (which is a stronger run guarantee and lets the user know something
long/important is happening).


Recycle
-------
Summary: Missing recycle() calls

Priority: 7 / 10
Severity: Warning
Category: Performance

Many resources, such as TypedArrays, VelocityTrackers, etc., should be
recycled (with a recycle() call) after use. This lint check looks for missing
recycle() calls.


ObsoleteLayoutParam
-------------------
Summary: Obsolete layout params

Priority: 6 / 10
Severity: Warning
Category: Performance

The given layout_param is not defined for the given layout, meaning it has no
effect. This usually happens when you change the parent layout or move view
code around without updating the layout params. This will cause useless
attribute processing at runtime, and is misleading for others reading the
layout so the parameter should be removed.


ObsoleteSdkInt
--------------
Summary: Obsolete SDK_INT Version Check

Priority: 6 / 10
Severity: Warning
Category: Performance

This check flags version checks that are not necessary, because the
minSdkVersion (or surrounding known API level) is already at least as high as
the version checked for.

Similarly, it also looks for resources in -vNN folders, such as values-v14
where the version qualifier is less than or equal to the minSdkVersion, where
the contents should be merged into the best folder.


StaticFieldLeak
---------------
Summary: Static Field Leaks

Priority: 6 / 10
Severity: Warning
Category: Performance

A static field will leak contexts.

Non-static inner classes have an implicit reference to their outer class. If
that outer class is for example a Fragment or Activity, then this reference
means that the long-running handler/loader/task will hold a reference to the
activity which prevents it from getting garbage collected.

Similarly, direct field references to activities and fragments from these
longer running instances can cause leaks.

ViewModel classes should never point to Views or non-application Contexts.


UnpackedNativeCode
------------------
Summary: Missing android:extractNativeLibs=false

Priority: 6 / 10
Severity: Warning
Category: Performance
NOTE: This issue is disabled by default!
You can enable it by adding --enable UnpackedNativeCode

This app loads native libraries using System.loadLibrary().

Consider adding android:extractNativeLibs="false" to the <application> tag in
AndroidManifest.xml. Starting with Android 6.0, this will make installation
faster, the app will take up less space on the device and updates will have
smaller download sizes.


UseCompoundDrawables
--------------------
Summary: Node can be replaced by a TextView with compound drawables

Priority: 6 / 10
Severity: Warning
Category: Performance

A LinearLayout which contains an ImageView and a TextView can be more
efficiently handled as a compound drawable (a single TextView, using the
drawableTop, drawableLeft, drawableRight and/or drawableBottom attributes to
draw one or more images adjacent to the text).

If the two widgets are offset from each other with margins, this can be
replaced with a drawablePadding attribute.

There's a lint quickfix to perform this conversion in the Eclipse plugin.


ViewTag
-------
Summary: Tagged object leaks

Priority: 6 / 10
Severity: Warning
Category: Performance

Prior to Android 4.0, the implementation of View.setTag(int, Object) would
store the objects in a static map, where the values were strongly referenced.
This means that if the object contains any references pointing back to the
context, the context (which points to pretty much everything else) will leak.
If you pass a view, the view provides a reference to the context that created
it. Similarly, view holders typically contain a view, and cursors are
sometimes also associated with views.


WearableBindListener
--------------------
Summary: Usage of Android Wear BIND_LISTENER is deprecated

Priority: 6 / 10
Severity: Fatal
Category: Performance

BIND_LISTENER receives all Android Wear events whether the application needs
them or not. This can be inefficient and cause applications to wake up
unnecessarily. With Google Play Services 8.2.0 or later it is recommended to
use a more efficient combination of manifest listeners and api-based live
listeners filtered by action, path and/or path prefix. 

More information: 
http://android-developers.blogspot.com/2016/04/deprecation-of-bindlistener.html

LogConditional
--------------
Summary: Unconditional Logging Calls

Priority: 5 / 10
Severity: Warning
Category: Performance
NOTE: This issue is disabled by default!
You can enable it by adding --enable LogConditional

The BuildConfig class (available in Tools 17) provides a constant, "DEBUG",
which indicates whether the code is being built in release mode or in debug
mode. In release mode, you typically want to strip out all the logging calls.
Since the compiler will automatically remove all code which is inside a "if
(false)" check, surrounding your logging calls with a check for
BuildConfig.DEBUG is a good idea.

If you really intend for the logging to be present in release mode, you can
suppress this warning with a @SuppressLint annotation for the intentional
logging calls.


VectorPath
----------
Summary: Long vector paths

Priority: 5 / 10
Severity: Warning
Category: Performance

Using long vector paths is bad for performance. There are several ways to make
the pathData shorter:
* Using less precision
* Removing some minor details
* Using the Android Studio vector conversion tool
* Rasterizing the image (converting to PNG)


ViewHolder
----------
Summary: View Holder Candidates

Priority: 5 / 10
Severity: Warning
Category: Performance

When implementing a view Adapter, you should avoid unconditionally inflating a
new layout; if an available item is passed in for reuse, you should try to use
that one instead. This helps make for example ListView scrolling much
smoother.

More information: 
http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder

AnimatorKeep
------------
Summary: Missing @Keep for Animated Properties

Priority: 4 / 10
Severity: Warning
Category: Performance

When you use property animators, properties can be accessed via reflection.
Those methods should be annotated with @Keep to ensure that during release
builds, the methods are not potentially treated as unused and removed, or
treated as internal only and get renamed to something shorter.

This check will also flag other potential reflection problems it encounters,
such as a missing property, wrong argument types, etc.


DuplicateDivider
----------------
Summary: Unnecessary Divider Copy

Priority: 4 / 10
Severity: Warning
Category: Performance

Older versions of the RecyclerView library did not include a divider
decorator, but one was provided as a sample in the support demos. This divider
class has been widely copy/pasted into various projects.

In recent versions of the support library, the divider decorator is now
included, so you can replace custom copies with the "built-in" version,
android.support.v7.widget.DividerItemDecoration.


FieldGetter
-----------
Summary: Using getter instead of field

Priority: 4 / 10
Severity: Warning
Category: Performance
NOTE: This issue is disabled by default!
You can enable it by adding --enable FieldGetter

Accessing a field within the class that defines a getter for that field is at
least 3 times faster than calling the getter. For simple getters that do
nothing other than return the field, you might want to just reference the
local field directly instead.

NOTE: As of Android 2.3 (Gingerbread), this optimization is performed
automatically by Dalvik, so there is no need to change your code; this is only
relevant if you are targeting older versions of Android.

More information: 
http://developer.android.com/guide/practices/design/performance.html#internal_get_set

HandlerLeak
-----------
Summary: Handler reference leaks

Priority: 4 / 10
Severity: Warning
Category: Performance

Since this Handler is declared as an inner class, it may prevent the outer
class from being garbage collected. If the Handler is using a Looper or
MessageQueue for a thread other than the main thread, then there is no issue.
If the Handler is using the Looper or MessageQueue of the main thread, you
need to fix your Handler declaration, as follows: Declare the Handler as a
static class; In the outer class, instantiate a WeakReference to the outer
class and pass this object to your Handler when you instantiate the Handler;
Make all references to members of the outer class using the WeakReference
object.


MergeRootFrame
--------------
Summary: FrameLayout can be replaced with <merge> tag

Priority: 4 / 10
Severity: Warning
Category: Performance

If a <FrameLayout> is the root of a layout and does not provide background or
padding etc, it can often be replaced with a <merge> tag which is slightly
more efficient. Note that this depends on context, so make sure you understand
how the <merge> tag works before proceeding.

More information: 
http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html

UseOfBundledGooglePlayServices
------------------------------
Summary: Use of bundled version of Google Play services

Priority: 4 / 10
Severity: Warning
Category: Performance

Google Play services SDK's can be selectively included, which enables a
smaller APK size. Consider declaring dependencies on individual Google Play
services SDK's. If you are using Firebase API's
(http://firebase.google.com/docs/android/setup), Android Studio's Tools →
Firebase assistant window can automatically add just the dependencies needed
for each feature.

More information: 
http://developers.google.com/android/guides/setup#split

UseSparseArrays
---------------
Summary: HashMap can be replaced with SparseArray

Priority: 4 / 10
Severity: Warning
Category: Performance

For maps where the keys are of type integer, it's typically more efficient to
use the Android SparseArray API. This check identifies scenarios where you
might want to consider using SparseArray instead of HashMap for better
performance.

This is particularly useful when the value types are primitives like ints,
where you can use SparseIntArray and avoid auto-boxing the values from int to
Integer.

If you need to construct a HashMap because you need to call an API outside of
your control which requires a Map, you can suppress this warning using for
example the @SuppressLint annotation.


UseValueOf
----------
Summary: Should use valueOf instead of new

Priority: 4 / 10
Severity: Warning
Category: Performance

You should not call the constructor for wrapper classes directly, such as`new
Integer(42)`. Instead, call the valueOf factory method, such as
Integer.valueOf(42). This will typically use less memory because common
integers such as 0 and 1 will share a single instance.


DisableBaselineAlignment
------------------------
Summary: Missing baselineAligned attribute

Priority: 3 / 10
Severity: Warning
Category: Performance

When a LinearLayout is used to distribute the space proportionally between
nested layouts, the baseline alignment property should be turned off to make
the layout computation faster.


FloatMath
---------
Summary: Using FloatMath instead of Math

Priority: 3 / 10
Severity: Warning
Category: Performance

In older versions of Android, using android.util.FloatMath was recommended for
performance reasons when operating on floats. However, on modern hardware
doubles are just as fast as float (though they take more memory), and in
recent versions of Android, FloatMath is actually slower than using
java.lang.Math due to the way the JIT optimizes java.lang.Math. Therefore, you
should use Math instead of FloatMath if you are only targeting Froyo and
above.

More information: 
http://developer.android.com/guide/practices/design/performance.html#avoidfloat

InefficientWeight
-----------------
Summary: Inefficient layout weight

Priority: 3 / 10
Severity: Warning
Category: Performance

When only a single widget in a LinearLayout defines a weight, it is more
efficient to assign a width/height of 0dp to it since it will absorb all the
remaining space anyway. With a declared width/height of 0dp it does not have
to measure its own size first.


NestedWeights
-------------
Summary: Nested layout weights

Priority: 3 / 10
Severity: Warning
Category: Performance

Layout weights require a widget to be measured twice. When a LinearLayout with
non-zero weights is nested inside another LinearLayout with non-zero weights,
then the number of measurements increase exponentially.


Overdraw
--------
Summary: Overdraw: Painting regions more than once

Priority: 3 / 10
Severity: Warning
Category: Performance

If you set a background drawable on a root view, then you should use a custom
theme where the theme background is null. Otherwise, the theme background will
be painted first, only to have your custom background completely cover it;
this is called "overdraw".

NOTE: This detector relies on figuring out which layouts are associated with
which activities based on scanning the Java code, and it's currently doing
that using an inexact pattern matching algorithm. Therefore, it can
incorrectly conclude which activity the layout is associated with and then
wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider
making a custom theme with your custom background and just using that theme
instead of a root element background.

Of course it's possible that your custom drawable is translucent and you want
it to be mixed with the background. However, you will get better performance
if you pre-mix the background with your drawable and use that resulting image
or color as a custom theme background instead.


UnusedResources
---------------
Summary: Unused resources

Priority: 3 / 10
Severity: Warning
Category: Performance

Unused resources make applications larger and slow down builds.


DevModeObsolete
---------------
Summary: Dev Mode Obsolete

Priority: 2 / 10
Severity: Warning
Category: Performance

In the past, our documentation recommended creating a dev product flavor with
has a minSdkVersion of 21, in order to enable multidexing to speed up builds
significantly during development.

That workaround is no longer necessary, and it has some serious downsides,
such as breaking API access checking (since the true minSdkVersion is no
longer known).

In recent versions of the IDE and the Gradle plugin, the IDE automatically
passes the API level of the connected device used for deployment, and if that
device is at least API 21, then multidexing is automatically turned on,
meaning that you get the same speed benefits as the dev product flavor but
without the downsides.


SyntheticAccessor
-----------------
Summary: Synthetic Accessor

Priority: 2 / 10
Severity: Warning
Category: Performance
NOTE: This issue is disabled by default!
You can enable it by adding --enable SyntheticAccessor

A private inner class which is accessed from the outer class will force the
compiler to insert a synthetic accessor; this means that you are causing extra
overhead. This is not important in small projects, but is important for large
apps running up against the 64K method handle limit, and especially for
libraries where you want to make sure your library is as small as possible for
the cases where your library is used in an app running up against the 64K
limit.


UselessLeaf
-----------
Summary: Useless leaf layout

Priority: 2 / 10
Severity: Warning
Category: Performance

A layout that has no children or no background can often be removed (since it
is invisible) for a flatter and more efficient layout hierarchy.


UselessParent
-------------
Summary: Useless parent layout

Priority: 2 / 10
Severity: Warning
Category: Performance

A layout with children that has no siblings, is not a scrollview or a root
layout, and does not have a background, can be removed and have its children
moved directly into the parent for a flatter and more efficient layout
hierarchy.


TooDeepLayout
-------------
Summary: Layout hierarchy is too deep

Priority: 1 / 10
Severity: Warning
Category: Performance

Layouts with too much nesting is bad for performance. Consider using a flatter
layout (such as RelativeLayout or GridLayout).The default maximum depth is 10
but can be configured with the environment variable ANDROID_LINT_MAX_DEPTH.


TooManyViews
------------
Summary: Layout has too many views

Priority: 1 / 10
Severity: Warning
Category: Performance

Using too many views in a single layout is bad for performance. Consider using
compound drawables or other tricks for reducing the number of views in this
layout.

The maximum view count defaults to 80 but can be configured with the
environment variable ANDROID_LINT_MAX_VIEW_COUNT.


UnusedIds
---------
Summary: Unused id

Priority: 1 / 10
Severity: Warning
Category: Performance
NOTE: This issue is disabled by default!
You can enable it by adding --enable UnusedIds

This resource id definition appears not to be needed since it is not
referenced from anywhere. Having id definitions, even if unused, is not
necessarily a bad idea since they make working on layouts and menus easier, so
there is not a strong reason to delete these.


UnusedNamespace
---------------
Summary: Unused namespace

Priority: 1 / 10
Severity: Warning
Category: Performance

Unused namespace declarations take up space and require processing that is not